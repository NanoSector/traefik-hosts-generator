package file_writer

import (
	"errors"
	"io/ioutil"
	"os"
	"strings"
)

const (
	EntriesHeader = "######## AUTOGENERATED BY TRAEFIK_HOSTS_GENERATOR ################"
	EntriesFooter = "######## AUTOGENERATED BY TRAEFIK_HOSTS_GENERATOR END ############"
)

func WriteToHosts(newHosts string, hostsLocation string, lineEndings string) error {
	currentContent, err := readHostsContent(hostsLocation)
	if err != nil {
		return err
	}

	headerPresent := isHeaderPresent(currentContent)
	footerPresent := isFooterPresent(currentContent)

	if headerPresent && footerPresent {
		headerStart := strings.Index(currentContent, EntriesHeader)
		footerStart := strings.Index(currentContent, EntriesFooter)

		oldContent := currentContent[headerStart+len(EntriesHeader) : footerStart]
		newContent := strings.Replace(currentContent, oldContent, lineEndings+newHosts, -1)

		err = ioutil.WriteFile(hostsLocation, []byte(newContent), 0)
		if err != nil {
			return err
		}

		return nil
	}

	if !headerPresent && !footerPresent {
		f, err := os.OpenFile(hostsLocation, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0600)
		if err != nil {
			return err
		}

		defer f.Close()
		newHosts = EntriesHeader + lineEndings + newHosts + lineEndings + EntriesFooter

		if _, err = f.WriteString(newHosts); err != nil {
			return err
		}
		return nil
	}

	return errors.New("hosts content malformed, traefik section is partially present")
}

func readHostsContent(hostsLocation string) (string, error) {
	content, err := ioutil.ReadFile(hostsLocation)
	if err != nil {
		return "", nil
	}

	return string(content), nil
}

func isHeaderPresent(content string) bool {
	return strings.Contains(content, EntriesHeader)
}

func isFooterPresent(content string) bool {
	return strings.Contains(content, EntriesFooter)
}
